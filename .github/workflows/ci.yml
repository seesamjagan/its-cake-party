name: üß™ Comprehensive Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  CACHE_KEY: node-modules

jobs:
  # =====================================================
  # UNIT & INTEGRATION TESTING WITH COVERAGE
  # =====================================================
  unit-tests:
    name: üß™ Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üìã Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_KEY }}-

      - name: üöÄ Install Dependencies
        run: npm ci

      - name: üîç Lint Code
        run: npm run lint

      - name: üèóÔ∏è Build Application
        run: npm run build

      - name: üß™ Run Unit Tests with Coverage
        run: npm run test:coverage

      - name: üìä Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: üìà Coverage Summary
        run: |
          echo "## üìä Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY

          if [ -f "coverage/coverage-summary.json" ]; then
            if command -v jq > /dev/null; then
              # Use jq for reliable JSON parsing
              echo "| Lines | $(jq -r '.total.lines.pct' coverage/coverage-summary.json)% |" >> $GITHUB_STEP_SUMMARY
              echo "| Functions | $(jq -r '.total.functions.pct' coverage/coverage-summary.json)% |" >> $GITHUB_STEP_SUMMARY
              echo "| Branches | $(jq -r '.total.branches.pct' coverage/coverage-summary.json)% |" >> $GITHUB_STEP_SUMMARY
              echo "| Statements | $(jq -r '.total.statements.pct' coverage/coverage-summary.json)% |" >> $GITHUB_STEP_SUMMARY
            else
              # Fallback to grep parsing
              echo "| Lines | $(grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' coverage/coverage-summary.json | sed 's/.*"pct":\([0-9]*\.[0-9]*\).*/\1/')% |" >> $GITHUB_STEP_SUMMARY
              echo "| Functions | $(grep -o '"functions":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' coverage/coverage-summary.json | sed 's/.*"pct":\([0-9]*\.[0-9]*\).*/\1/')% |" >> $GITHUB_STEP_SUMMARY
              echo "| Branches | $(grep -o '"branches":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' coverage/coverage-summary.json | sed 's/.*"pct":\([0-9]*\.[0-9]*\).*/\1/')% |" >> $GITHUB_STEP_SUMMARY
              echo "| Statements | $(grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' coverage/coverage-summary.json | sed 's/.*"pct":\([0-9]*\.[0-9]*\).*/\1/')% |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Coverage | File not found |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ‚ùå Coverage Threshold Check
        run: |
          # Check if coverage file exists
          if [ ! -f "coverage/coverage-summary.json" ]; then
            echo "‚ùå Coverage summary file not found!"
            exit 1
          fi

          # Extract lines coverage percentage using jq for more reliable parsing
          if command -v jq > /dev/null; then
            LINES_COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          else
            # Fallback to grep if jq is not available
            LINES_COVERAGE=$(grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' coverage/coverage-summary.json | sed 's/.*"pct":\([0-9]*\.[0-9]*\).*/\1/')
          fi

          echo "Lines coverage: $LINES_COVERAGE%"

          # Check if coverage meets 90% threshold
          if (( $(echo "$LINES_COVERAGE < 90" | bc -l) )); then
            echo "‚ùå Lines coverage ($LINES_COVERAGE%) is below 90% threshold"
            exit 1
          else
            echo "‚úÖ Lines coverage ($LINES_COVERAGE%) meets 90% threshold"
          fi

  # =====================================================
  # E2E TESTING WITH PLAYWRIGHT
  # =====================================================
  e2e-tests:
    name: üé≠ End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-tests

    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üìã Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_KEY }}-

      - name: üöÄ Install Dependencies
        run: npm ci

      - name: üé≠ Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.project }}

      - name: üèóÔ∏è Build for Production
        run: npm run build

      - name: üß™ Run E2E Tests - ${{ matrix.project }}
        run: npx playwright test --project=${{ matrix.project }}

      - name: üìä Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.project }}
          path: playwright-report/
          retention-days: 30

      - name: üé• Upload Test Videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-videos-${{ matrix.project }}
          path: test-results/
          retention-days: 7

  # =====================================================
  # MOBILE E2E TESTING
  # =====================================================
  mobile-e2e-tests:
    name: üì± Mobile E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: unit-tests

    strategy:
      fail-fast: false
      matrix:
        project: ['Mobile Chrome', 'Mobile Safari']

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üöÄ Install Dependencies
        run: npm ci

      - name: üì± Install Mobile Browsers
        run: npx playwright install --with-deps

      - name: üèóÔ∏è Build for Production
        run: npm run build

      - name: üß™ Run Mobile E2E Tests
        run: npx playwright test --project="${{ matrix.project }}"

      - name: üìä Upload Mobile Test Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: mobile-playwright-report-${{ matrix.project }}
          path: playwright-report/
          retention-days: 30

  # =====================================================
  # SECURITY & VULNERABILITY CHECKS
  # =====================================================
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üöÄ Install Dependencies
        run: npm ci

      - name: üîç Run Security Audit
        run: npm audit --audit-level=high

      - name: üîí Check for vulnerabilities
        run: npx audit-ci --config audit-ci.json
        continue-on-error: true

  # =====================================================
  # DEPENDENCY & BUNDLE ANALYSIS
  # =====================================================
  bundle-analysis:
    name: üì¶ Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üöÄ Install Dependencies
        run: npm ci

      - name: üèóÔ∏è Build Application
        run: npm run build

      - name: üìä Analyze Bundle Size
        run: |
          echo "## üì¶ Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -exec ls -lh {} \; | awk '{print "| " $9 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY
          find dist -name "*.css" -exec ls -lh {} \; | awk '{print "| " $9 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY

  # =====================================================
  # LIGHTHOUSE PERFORMANCE TESTING
  # =====================================================
  lighthouse-ci:
    name: üèÉ Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üöÄ Install Dependencies
        run: npm ci

      - name: üèóÔ∏è Build Application
        run: npm run build

      - name: üöÄ Start Server & Run Lighthouse
        run: |
          npm run preview &
          SERVER_PID=$!
          sleep 10

          # Install Lighthouse CI
          npm install -g @lhci/cli@0.12.x

          # Run Lighthouse CI
          lhci autorun --upload.target=temporary-public-storage --collect.startServerCommand="echo 'Server already running'" --collect.url="http://localhost:4173"

          # Clean up
          kill $SERVER_PID

      - name: üìä Performance Summary
        run: |
          echo "## üèÉ Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse performance analysis completed!" >> $GITHUB_STEP_SUMMARY
          echo "Check the Lighthouse CI results above for detailed performance metrics." >> $GITHUB_STEP_SUMMARY

  # =====================================================
  # ACCESSIBILITY TESTING
  # =====================================================
  accessibility-tests:
    name: ‚ôø Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üöÄ Install Dependencies
        run: npm ci

      - name: üé≠ Install Playwright
        run: npx playwright install --with-deps chromium

      - name: üèóÔ∏è Build Application
        run: npm run build

      - name: ‚ôø Run Accessibility Tests
        run: |
          # Start server in background
          npm run preview &
          SERVER_PID=$!
          sleep 10

          # Install axe-playwright
          npm install -D @axe-core/playwright

          # Create and run accessibility test
          cat > accessibility.test.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          const AxeBuilder = require('@axe-core/playwright').default;

          test.describe('Accessibility Tests', () => {
            test('should not have accessibility violations on home page', async ({ page }) => {
              await page.goto('http://localhost:4173');
              const accessibilityScanResults = await new AxeBuilder({ page }).analyze();
              expect(accessibilityScanResults.violations).toEqual([]);
            });

            test('should not have accessibility violations on products page', async ({ page }) => {
              await page.goto('http://localhost:4173/products');
              const accessibilityScanResults = await new AxeBuilder({ page }).analyze();
              expect(accessibilityScanResults.violations).toEqual([]);
            });

            test('should not have accessibility violations on contact page', async ({ page }) => {
              await page.goto('http://localhost:4173/contact');
              const accessibilityScanResults = await new AxeBuilder({ page }).analyze();
              expect(accessibilityScanResults.violations).toEqual([]);
            });
          });
          EOF

          npx playwright test accessibility.test.js --reporter=html

          # Clean up
          kill $SERVER_PID

  # =====================================================
  # FINAL STATUS REPORT
  # =====================================================
  test-summary:
    name: üìã Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, mobile-e2e-tests, security-audit, bundle-analysis]
    if: always()

    steps:
      - name: üìä Generate Test Summary
        run: |
          echo "## üß™ Comprehensive Testing Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Unit & Integration Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üé≠ E2E Tests (Desktop): ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üì± E2E Tests (Mobile): ${{ needs.mobile-e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ Bundle Analysis: ${{ needs.bundle-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" && "${{ needs.mobile-e2e-tests.result }}" == "success" ]]; then
            echo "### üéâ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "The application is ready for deployment. üöÄ" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Some tests failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the failed jobs and fix the issues before deployment." >> $GITHUB_STEP_SUMMARY
          fi

      - name: üö® Notify on Failure
        if: ${{ needs.unit-tests.result != 'success' || needs.e2e-tests.result != 'success' || needs.mobile-e2e-tests.result != 'success' }}
        run: |
          echo "‚ùå Testing pipeline failed!"
          echo "Check the logs for more details on what went wrong."
          exit 1